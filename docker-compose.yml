services:
#                         ======================= REDIS ===========================
  users_service_redis:
    image: redis:7.2.4-alpine
    restart: always
    networks:
      - postgres
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=fq4Rmz5Elc7pJZ8s3YvvKnmn0lk2v04taJOVjUkEb16z5ckSdZ
      - REDIS_PORT=6379
  #                         ======================= DB ==============================
  courses_service_db:
    image: postgres
    restart: unless-stopped
    networks:
      - postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 242171e6a6d3b0701e83f72d33432a8e9fa11068
      POSTGRES_DB: courses_service # todo: volumes

  user_service_db:
    image: postgres
    restart: unless-stopped
    networks:
      - postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 242171e6a6d3b0701e83f72d33432a8e9fa11068
      POSTGRES_DB: users_service # todo: volumes

  security_service_db:
    image: postgres
    restart: unless-stopped
    networks:
      - postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 242171e6a6d3b0701e83f72d33432a8e9fa11068
      POSTGRES_DB: security_service # todo: volumes

  minio:
    image: minio/minio
    container_name: minio
    command: server /data
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: adminadmin
      MINIO_ADDRESS: ':9000'
      MINIO_CONSOLE_ADDRESS: ':9001'
    volumes:
      - ./data:/data # Volume для хранения данных
      - ./init-policies:/docker-entrypoint-init.d/
    ports:
      - "9000:9000"
      - "9001:9001"
    entrypoint: /bin/sh -c "/docker-entrypoint-init.d/init-policies.sh & minio server /data"

#                         ======================= SERVICES ==============================

  courses_service:
    container_name: courses_service
    restart: always
    build: ./courses-service
    networks:
      - postgres
      - spring
    depends_on:
      - courses_service_db
    ports:
      - "8081:8081"

  user_service:
    container_name: user_service
    restart: always
    build: ./user-service
    networks:
      - postgres
      - spring
    depends_on:
      - user_service_db
      - users_service_redis
    ports:
      - "8082:8082"

  security_service:
    container_name: security_service
    restart: always
    build: ./security-service
    networks:
      - postgres
      - spring
    depends_on:
      security_service_db:
        condition: service_healthy
    ports:
      - "8083:8083"

  media_service:
    container_name: media_service
    restart: always
    build: ./media-service
    networks:
      - spring
    depends_on:
      - minio
    ports:
      - "8084:8084"

  kafka-zookeeper:
    image: confluentinc/cp-zookeeper:latest
    restart: always
    container_name: kafka-zookeeper
    user: root
    networks:
      - spring
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  kafka-broker:
    image: confluentinc/cp-kafka:latest
    restart: always
    container_name: kafka-broker
    user: root
    ports:
      - "9092:9092"
    networks:
      - spring
    depends_on:
      - kafka-zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'kafka-zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

networks:
  postgres:
  spring:
